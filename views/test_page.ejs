<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">

    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

    <script type="text/javascript" src="/static/EventEmitter/EventEmitter.min.js"></script>
    <script type="text/javascript" src="/static/roslibjs/roslib.min.js"></script>
    <script type="text/javascript">

    // variables

      // ros
      const ros = new ROSLIB.Ros();

      // image tab
      const img = document.createElement("img");

      // odemetry dataType
      var twist = {
          linear : {x:0.0, y:0.0, z:0.0},
          angular : {x:0.0, y:0.0, z:0.0},
      };

      // topics
      const geometry_topic = new ROSLIB.Topic({
          ros : ros,
          name : '/cmd_vel',
          messageType : 'geometry_msgs/Twist',
      });
      const image_topic = new ROSLIB.Topic({
          ros : ros,
          name : '/rgb_cam/image_raw',
          messageType : 'sensor_msgs/Image',
      });


    // events
      ros.on('connection', ()=> {
        console.log('ros2 connected.');
      });

    // functions
      function test_connect(){

        console.log('test_connect called');

        // connect
        ros.connect('ws:127.0.0.1:9090');

        // image subscriber callback function
        image_topic.subscribe((imgMes)=>{

          const can = document.getElementById("canvas_camera");

          can.width = imgMes.width;
          can.height = imgMes.height;

          const ctx = can.getContext("2d");

          const imgData = ctx.createImageData(imgMes.width, imgMes.height);
          const data = imgData.data;
          const inData = Uint8Array.from(imgMes.data);
          
          var j = 0, i = 4;
          while( j < inData.length) {
            data[i++] = inData[j++]; // red
            data[i++] = inData[j++]; // green
            data[i++] = inData[j++]; // blue
            data[i++] = 255;  // alpha
          }
          ctx.putImageData(imgData, 0, 0);
        });

      }

      function publish_foward(){
        twist.linear.x+=0.01;
        geometry_topic.publish(twist);
      }

      function publish_back(){
        twist.linear.x-=0.01;
        geometry_topic.publish(twist);
      }

      function publish_stop(){
        window.twist = {
          linear : {x:0.0, y:0.0, z:0.0},
          angular : {x:0.0, y:0.0, z:0.0},
        };
        geometry_topic.publish(twist);
      }
      

    </script>
  </head>

  <body>

    <div>
      <canvas id="canvas_camera"></canvas>
    </div>
    <div>
      time:<%= time %><br>
      data:<%= data %><br>
    
      <button type="button" class="btn btn-primary" onclick="test_connect()">Connect</button>
      <button type="button" class="btn btn-primary" onclick="publish_foward()">Foward</button>
      <button type="button" class="btn btn-primary" onclick="publish_back()">Back</button>
      <button type="button" class="btn btn-primary" onclick="publish_stop()">Stop</button>
    </div>
    
  </body>

</html>

